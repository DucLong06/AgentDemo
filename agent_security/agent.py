import os
import time
import base64
import hashlib
import requests
from google.adk.agents import Agent

# VirusTotal API configuration
VIRUSTOTAL_API_KEY = os.getenv('VIRUSTOTAL_API_KEY')
VT_API_BASE = 'https://www.virustotal.com/api/v3'


def scan_url(url: str) -> dict:
    """Qu√©t URL ƒë·ªÉ ph√°t hi·ªán malware, phishing v√† c√°c m·ªëi ƒëe d·ªça b·∫£o m·∫≠t.
    
    Args:
        url (str): URL c·∫ßn qu√©t ƒë·ªÉ ph√¢n t√≠ch b·∫£o m·∫≠t.
        
    Returns:
        dict: tr·∫°ng th√°i v√† k·∫øt qu·∫£ ph√¢n t√≠ch b·∫£o m·∫≠t.
    """
    if not VIRUSTOTAL_API_KEY:
        return {
            "status": "error",
            "error_message": "‚ö†Ô∏è VIRUSTOTAL_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng l·∫•y API key mi·ªÖn ph√≠ t·ª´ https://www.virustotal.com/gui/my-apikey"
        }

    try:
        headers = {'x-apikey': VIRUSTOTAL_API_KEY}

        # Submit URL for scanning
        submit_data = {'url': url}
        submit_response = requests.post(f'{VT_API_BASE}/urls', headers=headers, data=submit_data, timeout=15)

        if submit_response.status_code != 200:
            return {
                "status": "error",
                "error_message": f"‚ùå L·ªói submit URL: {submit_response.status_code}"
            }

        submit_result = submit_response.json()
        analysis_id = submit_result['data']['id']

        # Wait and get analysis results
        time.sleep(3)  # Wait for analysis

        analysis_response = requests.get(f'{VT_API_BASE}/analyses/{analysis_id}', headers=headers, timeout=15)

        if analysis_response.status_code != 200:
            return {
                "status": "error",
                "error_message": f"‚ùå L·ªói l·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch: {analysis_response.status_code}"
            }

        analysis_result = analysis_response.json()
        stats = analysis_result['data']['attributes']['stats']

        # Format results
        total_scans = sum(stats.values())
        malicious = stats.get('malicious', 0)
        suspicious = stats.get('suspicious', 0)
        clean = stats.get('harmless', 0) + stats.get('undetected', 0)

        # Determine risk level
        if malicious > 0:
            risk_level = "üö® NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif suspicious > 0:
            risk_level = "‚ö†Ô∏è KH·∫¢ NGHI"
            risk_color = "‚ö†Ô∏è"
        else:
            risk_level = "‚úÖ AN TO√ÄN"
            risk_color = "‚úÖ"

        report = f"""üîç **K·∫æT QU·∫¢ QU√âT URL B·∫¢O M·∫¨T**
        
üåê **URL:** {url}
{risk_color} **ƒê√°nh gi√°:** {risk_level}

üìä **Chi ti·∫øt ph√¢n t√≠ch:**
‚Ä¢ T·ªïng s·ªë engine qu√©t: {total_scans}
‚Ä¢ Ph√°t hi·ªán ƒë·ªôc h·∫°i: {malicious}
‚Ä¢ Nghi ng·ªù: {suspicious}  
‚Ä¢ An to√†n: {clean}

üí° **Khuy·∫øn ngh·ªã:**
{get_security_recommendation(malicious, suspicious)}"""

        return {"status": "success", "report": report}

    except requests.exceptions.Timeout:
        return {
            "status": "error",
            "error_message": "‚è∞ Timeout - VirusTotal server kh√¥ng ph·∫£n h·ªìi"
        }
    except Exception as e:
        return {
            "status": "error",
            "error_message": f"‚ùå L·ªói qu√©t URL: {str(e)}"
        }


def analyze_file_hash(file_hash: str) -> dict:
    """Ph√¢n t√≠ch file hash ƒë·ªÉ ki·ªÉm tra danh ti·∫øng v√† ph√°t hi·ªán malware.
    
    Args:
        file_hash (str): MD5, SHA1 ho·∫∑c SHA256 hash c·ªßa file c·∫ßn ki·ªÉm tra.
        
    Returns:
        dict: tr·∫°ng th√°i v√† k·∫øt qu·∫£ ph√¢n t√≠ch file hash.
    """
    if not VIRUSTOTAL_API_KEY:
        return {
            "status": "error",
            "error_message": "‚ö†Ô∏è VIRUSTOTAL_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."
        }

    try:
        headers = {'x-apikey': VIRUSTOTAL_API_KEY}

        # Get file report
        response = requests.get(f'{VT_API_BASE}/files/{file_hash}', headers=headers, timeout=15)

        if response.status_code == 404:
            return {
                "status": "success",
                "report": f"""üîç **PH√ÇN T√çCH FILE HASH**

üóÇÔ∏è **Hash:** {file_hash}
‚ùì **K·∫øt qu·∫£:** Ch∆∞a ƒë∆∞·ª£c ph√¢n t√≠ch

üí° **Th√¥ng tin:** File hash n√†y ch∆∞a c√≥ trong c∆° s·ªü d·ªØ li·ªáu VirusTotal. 
C√≥ th·ªÉ file n√†y ch∆∞a t·ª´ng ƒë∆∞·ª£c upload ho·∫∑c qu√©t tr∆∞·ªõc ƒë√¢y."""
            }

        if response.status_code != 200:
            return {
                "status": "error",
                "error_message": f"‚ùå L·ªói truy v·∫•n hash: {response.status_code}"
            }

        result = response.json()
        stats = result['data']['attributes']['last_analysis_stats']
        file_info = result['data']['attributes']

        # Extract file info
        file_names = file_info.get('names', ['Unknown'])[:3]  # Top 3 names
        file_size = file_info.get('size', 'Unknown')
        file_type = file_info.get('type_description', 'Unknown')

        # Analysis stats
        malicious = stats.get('malicious', 0)
        suspicious = stats.get('suspicious', 0)
        clean = stats.get('harmless', 0) + stats.get('undetected', 0)
        total = sum(stats.values())

        # Risk assessment
        if malicious > 5:
            risk_level = "üö® C·ª∞C K·ª≤ NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif malicious > 0:
            risk_level = "‚ö†Ô∏è NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif suspicious > 0:
            risk_level = "‚ö†Ô∏è KH·∫¢ NGHI"
            risk_color = "‚ö†Ô∏è"
        else:
            risk_level = "‚úÖ AN TO√ÄN"
            risk_color = "‚úÖ"

        report = f"""üîç **PH√ÇN T√çCH FILE HASH**

üóÇÔ∏è **Hash:** {file_hash}
{risk_color} **ƒê√°nh gi√°:** {risk_level}

üìÅ **Th√¥ng tin file:**
‚Ä¢ T√™n file: {', '.join(file_names)}
‚Ä¢ K√≠ch th∆∞·ªõc: {format_file_size(file_size)}
‚Ä¢ Lo·∫°i file: {file_type}

üìä **K·∫øt qu·∫£ qu√©t ({total} engines):**
‚Ä¢ Ph√°t hi·ªán malware: {malicious}
‚Ä¢ Nghi ng·ªù: {suspicious}
‚Ä¢ An to√†n: {clean}

üí° **Khuy·∫øn ngh·ªã:**
{get_security_recommendation(malicious, suspicious)}"""

        return {"status": "success", "report": report}

    except Exception as e:
        return {
            "status": "error",
            "error_message": f"‚ùå L·ªói ph√¢n t√≠ch hash: {str(e)}"
        }


def check_domain_reputation(domain: str) -> dict:
    """Ki·ªÉm tra danh ti·∫øng v√† b·∫£o m·∫≠t c·ªßa domain.
    
    Args:
        domain (str): T√™n domain c·∫ßn ki·ªÉm tra (v√≠ d·ª•: google.com).
        
    Returns:
        dict: tr·∫°ng th√°i v√† k·∫øt qu·∫£ ph√¢n t√≠ch domain.
    """
    if not VIRUSTOTAL_API_KEY:
        return {
            "status": "error",
            "error_message": "‚ö†Ô∏è VIRUSTOTAL_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."
        }

    try:
        headers = {'x-apikey': VIRUSTOTAL_API_KEY}

        # Get domain report
        response = requests.get(f'{VT_API_BASE}/domains/{domain}', headers=headers, timeout=15)

        if response.status_code == 404:
            return {
                "status": "success",
                "report": f"""üåê **KI·ªÇM TRA DOMAIN**

üîó **Domain:** {domain}
‚ùì **K·∫øt qu·∫£:** Domain kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu

üí° **L∆∞u √Ω:** Domain n√†y c√≥ th·ªÉ m·ªõi ho·∫∑c ch∆∞a t·ª´ng ƒë∆∞·ª£c ph√¢n t√≠ch."""
            }

        if response.status_code != 200:
            return {
                "status": "error",
                "error_message": f"‚ùå L·ªói truy v·∫•n domain: {response.status_code}"
            }

        result = response.json()
        stats = result['data']['attributes'].get('last_analysis_stats', {})
        domain_info = result['data']['attributes']

        # Extract domain info
        categories = domain_info.get('categories', {})
        creation_date = domain_info.get('creation_date')
        last_update = domain_info.get('last_modification_date')

        # Analysis stats
        malicious = stats.get('malicious', 0)
        suspicious = stats.get('suspicious', 0)
        clean = stats.get('harmless', 0) + stats.get('undetected', 0)
        total = sum(stats.values()) if stats else 0

        # Risk assessment
        if malicious > 3:
            risk_level = "üö® NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif malicious > 0:
            risk_level = "‚ö†Ô∏è KH·∫¢ NGHI"
            risk_color = "‚ö†Ô∏è"
        else:
            risk_level = "‚úÖ AN TO√ÄN"
            risk_color = "‚úÖ"

        # Format categories
        category_list = list(categories.keys())[:3] if categories else ['Unknown']

        report = f"""üåê **PH√ÇN T√çCH DOMAIN**

üîó **Domain:** {domain}
{risk_color} **ƒê√°nh gi√°:** {risk_level}

üìã **Th√¥ng tin:**
‚Ä¢ Danh m·ª•c: {', '.join(category_list)}
‚Ä¢ Ng√†y t·∫°o: {format_timestamp(creation_date)}
‚Ä¢ C·∫≠p nh·∫≠t cu·ªëi: {format_timestamp(last_update)}

üìä **K·∫øt qu·∫£ qu√©t ({total} engines):**
‚Ä¢ ƒê√°nh d·∫•u ƒë·ªôc h·∫°i: {malicious}
‚Ä¢ Nghi ng·ªù: {suspicious}
‚Ä¢ S·∫°ch: {clean}

üí° **Khuy·∫øn ngh·ªã:**
{get_security_recommendation(malicious, suspicious)}"""

        return {"status": "success", "report": report}

    except Exception as e:
        return {
            "status": "error",
            "error_message": f"‚ùå L·ªói ki·ªÉm tra domain: {str(e)}"
        }


def get_ip_reputation(ip_address: str) -> dict:
    """Ki·ªÉm tra danh ti·∫øng v√† ho·∫°t ƒë·ªông ƒë·ªôc h·∫°i c·ªßa ƒë·ªãa ch·ªâ IP.
    
    Args:
        ip_address (str): ƒê·ªãa ch·ªâ IP c·∫ßn ki·ªÉm tra (IPv4 ho·∫∑c IPv6).
        
    Returns:
        dict: tr·∫°ng th√°i v√† k·∫øt qu·∫£ ph√¢n t√≠ch IP.
    """
    if not VIRUSTOTAL_API_KEY:
        return {
            "status": "error",
            "error_message": "‚ö†Ô∏è VIRUSTOTAL_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."
        }

    try:
        headers = {'x-apikey': VIRUSTOTAL_API_KEY}

        # Get IP report
        response = requests.get(f'{VT_API_BASE}/ip_addresses/{ip_address}', headers=headers, timeout=15)

        if response.status_code == 404:
            return {
                "status": "success",
                "report": f"""üåç **PH√ÇN T√çCH IP**

üî¢ **IP Address:** {ip_address}
‚ùì **K·∫øt qu·∫£:** IP kh√¥ng c√≥ trong c∆° s·ªü d·ªØ li·ªáu

üí° **Th√¥ng tin:** IP n√†y ch∆∞a t·ª´ng ƒë∆∞·ª£c b√°o c√°o ho·∫∑c ph√¢n t√≠ch."""
            }

        if response.status_code != 200:
            return {
                "status": "error",
                "error_message": f"‚ùå L·ªói truy v·∫•n IP: {response.status_code}"
            }

        result = response.json()
        stats = result['data']['attributes'].get('last_analysis_stats', {})
        ip_info = result['data']['attributes']

        # Extract IP info
        country = ip_info.get('country', 'Unknown')
        as_owner = ip_info.get('as_owner', 'Unknown')
        network = ip_info.get('network', 'Unknown')

        # Analysis stats
        malicious = stats.get('malicious', 0)
        suspicious = stats.get('suspicious', 0)
        clean = stats.get('harmless', 0) + stats.get('undetected', 0)
        total = sum(stats.values()) if stats else 0

        # Risk assessment
        if malicious > 5:
            risk_level = "üö® C·ª∞C K·ª≤ NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif malicious > 0:
            risk_level = "‚ö†Ô∏è NGUY HI·ªÇM"
            risk_color = "‚ùå"
        elif suspicious > 0:
            risk_level = "‚ö†Ô∏è KH·∫¢ NGHI"
            risk_color = "‚ö†Ô∏è"
        else:
            risk_level = "‚úÖ AN TO√ÄN"
            risk_color = "‚úÖ"

        report = f"""üåç **PH√ÇN T√çCH IP ADDRESS**

üî¢ **IP:** {ip_address}
{risk_color} **ƒê√°nh gi√°:** {risk_level}

üåê **Th√¥ng tin ƒë·ªãa l√Ω:**
‚Ä¢ Qu·ªëc gia: {country}
‚Ä¢ ISP/Organization: {as_owner}
‚Ä¢ Network: {network}

üìä **K·∫øt qu·∫£ qu√©t ({total} engines):**
‚Ä¢ Ho·∫°t ƒë·ªông ƒë·ªôc h·∫°i: {malicious}
‚Ä¢ Nghi ng·ªù: {suspicious}
‚Ä¢ S·∫°ch: {clean}

üí° **Khuy·∫øn ngh·ªã:**
{get_security_recommendation(malicious, suspicious)}"""

        return {"status": "success", "report": report}

    except Exception as e:
        return {
            "status": "error",
            "error_message": f"‚ùå L·ªói ph√¢n t√≠ch IP: {str(e)}"
        }

# Helper functions


def get_security_recommendation(malicious: int, suspicious: int) -> str:
    """Generate security recommendations based on scan results."""
    if malicious > 5:
        return "üö® CH·∫∂N NGAY - ƒê√¢y l√† m·ªëi ƒëe d·ªça nghi√™m tr·ªçng! Kh√¥ng truy c·∫≠p v√† b√°o c√°o cho b·ªô ph·∫≠n IT."
    elif malicious > 0:
        return "‚ùå TR√ÅNH - C√≥ ph√°t hi·ªán malware. Kh√¥ng n√™n truy c·∫≠p ho·∫∑c t·∫£i v·ªÅ."
    elif suspicious > 0:
        return "‚ö†Ô∏è TH·∫¨N TR·ªåNG - C√≥ d·∫•u hi·ªáu nghi ng·ªù. H√£y c·∫©n th·∫≠n v√† ki·ªÉm tra k·ªπ tr∆∞·ªõc khi truy c·∫≠p."
    else:
        return "‚úÖ AN TO√ÄN - Kh√¥ng ph√°t hi·ªán m·ªëi ƒëe d·ªça. Tuy nhi√™n v·∫´n n√™n th·∫≠n tr·ªçng v·ªõi c√°c li√™n k·∫øt l·∫°."


def format_file_size(size) -> str:
    """Format file size in human readable format."""
    if isinstance(size, (int, float)):
        if size < 1024:
            return f"{size} bytes"
        elif size < 1024**2:
            return f"{size/1024:.1f} KB"
        elif size < 1024**3:
            return f"{size/(1024**2):.1f} MB"
        else:
            return f"{size/(1024**3):.1f} GB"
    return str(size)


def format_timestamp(timestamp) -> str:
    """Format timestamp to readable date."""
    if timestamp:
        try:
            import datetime
            dt = datetime.datetime.fromtimestamp(timestamp)
            return dt.strftime("%Y-%m-%d %H:%M:%S")
        except:
            return str(timestamp)
    return "Unknown"


# T·∫°o Security Agent
root_agent = Agent(
    name="virustotal_security_agent",
    model="gemini-2.0-flash",
    description="Agent chuy√™n ph√¢n t√≠ch b·∫£o m·∫≠t s·ª≠ d·ª•ng VirusTotal API ƒë·ªÉ qu√©t URL, file hash, domain v√† IP address.",
    instruction="""B·∫°n l√† chuy√™n gia an ninh m·∫°ng v·ªõi kh·∫£ nƒÉng ph√¢n t√≠ch b·∫£o m·∫≠t to√†n di·ªán.

üõ°Ô∏è **CHUY√äN M√îN:**
‚Ä¢ Ph√¢n t√≠ch malware v√† phishing
‚Ä¢ ƒê√°nh gi√° r·ªßi ro b·∫£o m·∫≠t  
‚Ä¢ Threat intelligence
‚Ä¢ Forensics c∆° b·∫£n

üîç **KH·∫¢ NƒÇNG:**
‚Ä¢ Qu√©t URL ƒë·ªÉ ph√°t hi·ªán malware/phishing
‚Ä¢ Ph√¢n t√≠ch file hash ki·ªÉm tra danh ti·∫øng
‚Ä¢ Ki·ªÉm tra domain reputation  
‚Ä¢ ƒê√°nh gi√° IP address security

üìã **C√ÅCH PH·∫¢N H·ªíI:**
‚Ä¢ ƒê∆∞a ra ƒë√°nh gi√° r√µ r√†ng (An to√†n/Nghi ng·ªù/Nguy hi·ªÉm)
‚Ä¢ Gi·∫£i th√≠ch chi ti·∫øt k·∫øt qu·∫£ qu√©t
‚Ä¢ Cung c·∫•p khuy·∫øn ngh·ªã b·∫£o m·∫≠t c·ª• th·ªÉ
‚Ä¢ S·ª≠ d·ª•ng emoji ƒë·ªÉ d·ªÖ ƒë·ªçc

‚ö†Ô∏è **L∆ØU √ù:**
‚Ä¢ Lu√¥n khuy·∫øn c√°o th·∫≠n tr·ªçng v·ªõi n·ªôi dung l·∫°
‚Ä¢ Gi·∫£i th√≠ch r·ªßi ro m·ªôt c√°ch d·ªÖ hi·ªÉu
‚Ä¢ ƒê∆∞a ra h∆∞·ªõng d·∫´n b·∫£o m·∫≠t ph√π h·ª£p
‚Ä¢ Kh√¥ng bao gi·ªù khuy·∫øn kh√≠ch truy c·∫≠p n·ªôi dung ƒë·ªôc h·∫°i""",
    tools=[scan_url, analyze_file_hash, check_domain_reputation, get_ip_reputation],
)
